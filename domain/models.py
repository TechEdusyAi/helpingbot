"""Domain entities for the trading bot."""
from __future__ import annotations

from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from typing import Optional

from utils.validation import ensure_non_empty_string, ensure_positive_number


class SignalType(str, Enum):
    """Enumeration of supported trading signal types."""

    BUY = "buy"
    SELL = "sell"
    HOLD = "hold"


class OrderSide(str, Enum):
    """Enumeration of supported order sides."""

    BUY = "buy"
    SELL = "sell"


@dataclass(frozen=True)
class Instrument:
    """Tradable instrument definition."""

    symbol: str
    name: Optional[str] = None
    tick_size: float = 0.01

    def __post_init__(self) -> None:
        ensure_non_empty_string(self.symbol, "Instrument symbol must be provided")
        ensure_positive_number(self.tick_size, "Instrument tick size must be positive")


@dataclass(frozen=True)
class Candle:
    """OHLC candle for a specific instrument."""

    instrument: Instrument
    timestamp: datetime
    open: float
    high: float
    low: float
    close: float
    volume: Optional[float] = None

    def __post_init__(self) -> None:
        ensure_positive_number(self.open, "Open price must be positive")
        ensure_positive_number(self.high, "High price must be positive")
        ensure_positive_number(self.low, "Low price must be positive")
        ensure_positive_number(self.close, "Close price must be positive")
        if self.high < self.low:
            raise ValueError("High price cannot be lower than low price")
        if not (self.high >= max(self.open, self.close) and self.low <= min(self.open, self.close)):
            raise ValueError("High/low must bound open/close prices")


@dataclass(frozen=True)
class TradingSignal:
    """Signal generated by a strategy."""

    instrument: Instrument
    signal_type: SignalType
    strength: Optional[float] = None

    def __post_init__(self) -> None:
        if self.strength is not None and not 0 <= self.strength <= 1:
            raise ValueError("Signal strength must be in [0, 1]")


@dataclass(frozen=True)
class Order:
    """Order representation passed to the order execution layer."""

    instrument: Instrument
    side: OrderSide
    quantity: float
    price: Optional[float] = None
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    metadata: dict = field(default_factory=dict)

    def __post_init__(self) -> None:
        ensure_positive_number(self.quantity, "Order quantity must be positive")
        if self.price is not None:
            ensure_positive_number(self.price, "Order price must be positive")
        if self.stop_loss is not None and self.take_profit is not None:
            if self.side == OrderSide.BUY and not (self.stop_loss < self.take_profit):
                raise ValueError("For buy orders stop-loss must be below take-profit")
            if self.side == OrderSide.SELL and not (self.stop_loss > self.take_profit):
                raise ValueError("For sell orders stop-loss must be above take-profit")
